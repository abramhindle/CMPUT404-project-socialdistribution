# Generated by Django 4.1.2 on 2022-11-20 22:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=300, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('profile_image', models.CharField(blank=True, max_length=250)),
                ('github_handle', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_remote_user', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain text'), ('text/markdown', 'Markdown text')], default='text/plain', max_length=200)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_requests_received', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_url', models.URLField(max_length=300, unique=True)),
                ('auth_username', models.CharField(max_length=300)),
                ('auth_password', models.CharField(max_length=300)),
                ('team', models.IntegerField(choices=[(10, 10), (11, 11), (14, 14)], default=14)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RemoteAuthor',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webserver.node')),
            ],
        ),
        migrations.CreateModel(
            name='RemotePost',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webserver.remoteauthor')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('edited_at', models.DateTimeField(null=True, verbose_name='date edited')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('source', models.CharField(default='', max_length=200)),
                ('origin', models.CharField(default='', max_length=200)),
                ('unlisted', models.BooleanField(default=False)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('FRIENDS', 'Friends'), ('PRIVATE', 'Private')], default='PUBLIC', max_length=200)),
                ('content_type', models.CharField(choices=[('text/plain', 'Plain text'), ('text/markdown', 'Markdown text')], default='text/plain', max_length=200)),
                ('content', models.TextField(blank=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.comment')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.post')),
            ],
        ),
        migrations.CreateModel(
            name='Inbox',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date created')),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.comment')),
                ('follow_request_received', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.followrequest')),
                ('like', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.like')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.post')),
                ('remote_post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.remotepost')),
                ('target_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='followrequest',
            name='remote_sender',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.remoteauthor'),
        ),
        migrations.AddField(
            model_name='followrequest',
            name='sender',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='follow_requests_sent', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webserver.post'),
        ),
        migrations.AlterUniqueTogether(
            name='followrequest',
            unique_together={('remote_sender', 'receiver'), ('sender', 'receiver')},
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('followee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_by_authors', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='following_authors', to=settings.AUTH_USER_MODEL)),
                ('remote_follower', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='webserver.remoteauthor')),
            ],
            options={
                'unique_together': {('remote_follower', 'followee'), ('follower', 'followee')},
            },
        ),
    ]
